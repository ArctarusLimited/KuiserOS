# Allows either our own or private routes,
# intended to be used for IGP filtering only.
function is_v4_self_or_private() {
    return is_v4_self() || net ~ PRIVATE_V4;
}

function is_v6_self_or_private() {
    return is_v6_self() || net ~ PRIVATE_V6;
}

function is_v4_bogon() {
    return net ~ BOGONS_V4;
}

function is_v6_bogon() {
    return net ~ BOGONS_V6;
}

function is_v4_default() {
    return net = 0.0.0.0/0;
}

function is_v6_default() {
    return net = ::/0;
}

function is_v4_special_importable() {
    # wireguard VPN routes can be imported and redistributed
    if ifname = "wgvpn0" then return true;

    return false;
}

function is_v6_special_importable() {
    # wireguard VPN routes can be imported and redistributed
    if ifname = "wgvpn0" then return true;

    return false;
}

### RPKI ###

roa4 table r4;
roa6 table r6;

protocol rpki rpki1 {
    roa4 { table r4; };
    roa6 { table r6; };

    remote RPKI_SERVER port 3323;

    retry keep 90;
    refresh keep 900;
    expire keep 172800;
}

function is_v4_rpki_invalid() {
  return roa_check(r4, net, bgp_path.last_nonaggregated) = ROA_INVALID;
}

function is_v6_rpki_invalid() {
  return roa_check(r6, net, bgp_path.last_nonaggregated) = ROA_INVALID;
}

### Import / export checks ###

function transit_import_v4() {
    # todo: add an option to reject bogons here too
    # leaving it disabled for now as some peers give a default route...
    if is_v4_self() then return false;
    if bgp_path.len > 64 then return false;

    if(is_v4_rpki_invalid()) then return false;

    return true;
}

function transit_import_v6() {
    if is_v6_self() then return false;
    if bgp_path.len > 64 then return false;

    if(is_v4_rpki_invalid()) then return false;

    return true;
}

function ix_import_v4() {
    if is_v4_self() || is_v4_bogon() then return false;
    if bgp_path.len > 64 then return false;

    if(is_v4_rpki_invalid()) then return false;

    return true;
}

function ix_import_v6() {
    if is_v6_self() || is_v6_bogon() then return false;
    if bgp_path.len > 64 then return false;

    if(is_v6_rpki_invalid()) then return false;

    return true;
}

function peer_import_v4(int asnr)
{
    if is_v4_self() || is_v4_bogon() then return false;

    if bgp_path.first != asnr then return false;
    if bgp_path.len > 64 then return false;

    if(is_v4_rpki_invalid()) then return false;

    return true;
}

function peer_import_v6(int asnr)
{
    if is_v6_self() || is_v6_bogon() then return false;

    if bgp_path.first != asnr then return false;
    if bgp_path.len > 64 then return false;

    if(is_v6_rpki_invalid()) then return false;

    return false;
}

function downstream_import_v4(int asnr)
{
    # todo: check stuff
    return peer_import_v4(asnr);
}

function downstream_import_v6(int asnr)
{
    return peer_import_v6(asnr);
}

### Filters ###

filter eidolon_exports_v4 {
    if proto = "exterior_static_v4" then {
        accept;
    }

    reject;
}

filter eidolon_exports_v6 {
    if proto = "exterior_static_v6" then {
        accept;
    }

    reject;
}

filter eidolon_exports_downstream_v4 {
    if is_v4_bogon() then reject;

    accept;
}

filter eidolon_exports_downstream_v6 {
    if is_v6_bogon() then reject;

    accept;
}


# Here we give default routes a low priority
# so they are treated as a fallback;
# other routes should be given the highest priority.

# Default routes imported from direct BGP neighbors should take priority
# over routes from iBGP (for now).
filter master_static_imports_v4 {
    if is_v4_default() then { preference = 10; }
    else { preference = 500; }
    
    accept;
}

filter master_static_imports_v6 {
    if is_v6_default() then { preference = 10; }
    else { preference = 500; }
    
    accept;
}

filter master_kernel_imports_v4 {
    if is_v4_special_importable() then accept;

    reject;
}

filter master_kernel_imports_v6 {
    if is_v6_special_importable() then accept;

    reject;
}
